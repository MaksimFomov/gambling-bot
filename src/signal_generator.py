"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.

–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
–≤–∫–ª—é—á–∞—è –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
"""

import random
import logging
import threading
from datetime import datetime, timedelta
from typing import Optional

from .database import DatabaseManager
from .config import SignalGenerationConfig

logger = logging.getLogger(__name__)


class SignalGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è Gates of Olympus."""
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
    MULTIPLIERS = ["x25+", "x50+", "x100+"]
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∏–Ω–æ–≤
    SPIN_COUNTS = [30, 50, 70, 100]
    
    # –î–∏–∞–ø–∞–∑–æ–Ω —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    MIN_CONFIDENCE = SignalGenerationConfig.MIN_SIGNAL_ACCURACY
    MAX_CONFIDENCE = SignalGenerationConfig.MAX_SIGNAL_ACCURACY
    
    # –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–º–∏–Ω—É—Ç—ã)
    MIN_NEXT_UPDATE = 10
    MAX_NEXT_UPDATE = 25
    
    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    _user_locks = {}
    _locks_lock = threading.Lock()
    
    @classmethod
    def _get_user_lock(cls, user_id: int) -> threading.Lock:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        with cls._locks_lock:
            if user_id not in cls._user_locks:
                cls._user_locks[user_id] = threading.Lock()
            return cls._user_locks[user_id]
    
    @classmethod
    def generate_signal_for_user(cls, user_id: int) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            str: –¢–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞ –∏–ª–∏ None –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
        """
        # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_lock = cls._get_user_lock(user_id)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if not user_lock.acquire(blocking=False):
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (—É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)")
            return None
        
        try:
            now = datetime.utcnow()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–∏–≥–Ω–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_signal_info = DatabaseManager.get_user_signal_info(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            if user_signal_info and user_signal_info["next_update"] and now < user_signal_info["next_update"]:
                logger.info(f"–°–∏–≥–Ω–∞–ª –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {user_signal_info['next_update']}")
                return None

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            signal_text = cls._create_signal_text(now)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–≥–Ω–∞–ª–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            next_update = now + timedelta(minutes=random.randint(cls.MIN_NEXT_UPDATE, cls.MAX_NEXT_UPDATE))
            
            try:
                if DatabaseManager.update_user_signal(user_id, signal_text, now, next_update):
                    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {next_update}")
                    return signal_text
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return None
            except Exception as db_error:
                logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {db_error}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
        finally:
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            try:
                user_lock.release()
            except Exception as release_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {release_error}")
    
    @classmethod
    def generate_signal(cls) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
        
        Returns:
            str: –¢–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞
        """
        now = datetime.utcnow()
        return cls._create_signal_text(now)
    
    @classmethod
    def _create_signal_text(cls, timestamp: datetime) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞.
        
        Args:
            timestamp: –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
            
        Returns:
            str: –¢–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞
        """
        multiplier = random.choice(cls.MULTIPLIERS)
        spins = random.choice(cls.SPIN_COUNTS)
        confidence = random.randint(cls.MIN_CONFIDENCE, cls.MAX_CONFIDENCE)
        
        return (
            f"üì° *–°–∏–≥–Ω–∞–ª –æ—Ç –ò–ò-–±–æ—Ç–∞:*\n\n"
            f"üé∞ *Gates of Olympus*\n"
            f"üí• –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞ {multiplier} ‚Äî *{confidence}%*\n"
            f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: *{spins} —Å–ø–∏–Ω–æ–≤*\n"
            f"üïí –í—Ä–µ–º—è: {timestamp.strftime('%H:%M UTC')}"
        )


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def generate_signal_for_user(user_id: int) -> Optional[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
    return SignalGenerator.generate_signal_for_user(user_id)


def generate_signal() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
    return SignalGenerator.generate_signal() 